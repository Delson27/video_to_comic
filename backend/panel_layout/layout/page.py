import os
import random
import copy
from backend.class_def import panel


template_specs = {
    "1": {"span": 1, "direction": "row"},
    "2": {"span": 2, "direction": "row"},
    "3": {"span": 3, "direction": "column"},
    "4": {"span": 2, "direction": "column"}
}

input = '433343333343343333443333443334333343344443433'


def hammingDist(str1, str2):
    i = 0
    count = 0

    while i < len(str1):
        if str1[i] != str2[i]:
            count += 1
        i += 1
    return count


def get_files_in_folder(folder_path):
    file_dicts = []
    for root, dirs, files in os.walk(folder_path):
        for file in files:
            file_path = os.path.join(root, file)
            rank = random.randint(1, 3)
            file_dicts.append({"name": file, "rank": rank})
    return file_dicts


# ✅ Optimized templates - prioritize 8-panel layouts for maximum space utilization
templates = [
    # 8-panel layouts (PRIORITY) - these will be used for most pages
    '11111111', '11111112', '11111113', '11111121', '11111122', '11111123', '11111131', '11111132', '11111133',
    '11111211', '11111212', '11111213', '11111221', '11111222', '11111223', '11111231', '11111232', '11111233',
    '11111311', '11111312', '11111313', '11111321', '11111322', '11111323', '11111331', '11111332', '11111333',
    '11112111', '11112112', '11112113', '11112121', '11112122', '11112123', '11112131', '11112132', '11112133',
    '11112211', '11112212', '11112213', '11112221', '11112222', '11112223', '11112231', '11112232', '11112233',
    '11112311', '11112312', '11112313', '11112321', '11112322', '11112323', '11112331', '11112332', '11112333',
    '11113111', '11113112', '11113113', '11113121', '11113122', '11113123', '11113131', '11113132', '11113133',
    '11113211', '11113212', '11113213', '11113221', '11113222', '11113223', '11113231', '11113232', '11113233',
    '11113311', '11113312', '11113313', '11113321', '11113322', '11113323', '11113331', '11113332', '11113333',
    
    # Original large templates (8 panels)
    '14124114', '312341', '4432111', '21411241', '3241141', '13411141',
    '12411131', '1321113', '131423', '142344', '234241', '2411413',
    '3141214', '42111131',
    
    # 7-panel layouts (for when 8 doesn't fit perfectly)
    '1111111', '1111112', '1111113', '1111121', '1111122', '1111123', '1111131', '1111132', '1111133',
    '1111211', '1111212', '1111213', '1111221', '1111222', '1111223', '1111231', '1111232', '1111233',
    '1111311', '1111312', '1111313', '1111321', '1111322', '1111323', '1111331', '1111332', '1111333',
    '1112111', '1112112', '1112113', '1112121', '1112122', '1112123', '1112131', '1112132', '1112133',
    '1112211', '1112212', '1112213', '1112221', '1112222', '1112223', '1112231', '1112232', '1112233',
    '1112311', '1112312', '1112313', '1112321', '1112322', '1112323', '1112331', '1112332', '1112333',
    '1113111', '1113112', '1113113', '1113121', '1113122', '1113123', '1113131', '1113132', '1113133',
    '1113211', '1113212', '1113213', '1113221', '1113222', '1113223', '1113231', '1113232', '1113233',
    '1113311', '1113312', '1113313', '1113321', '1113322', '1113323', '1113331', '1113332', '1113333',
    
    # Smaller layouts for leftovers (1-6 panels)
    '111111', '111112', '111113', '111121', '111122', '111123', '111131', '111132', '111133',
    '111211', '111212', '111213', '111221', '111222', '111223', '111231', '111232', '111233',
    '111311', '111312', '111313', '111321', '111322', '111323', '111331', '111332', '111333',
    '112111', '112112', '112113', '112121', '112122', '112123', '112131', '112132', '112133',
    '112211', '112212', '112213', '112221', '112222', '112223', '112231', '112232', '112233',
    '112311', '112312', '112313', '112321', '112322', '112323', '112331', '112332', '112333',
    '113111', '113112', '113113', '113121', '113122', '113123', '113131', '113132', '113133',
    '113211', '113212', '113213', '113221', '113222', '113223', '113231', '113232', '113233',
    '113311', '113312', '113313', '113321', '113322', '113323', '113331', '113332', '113333',
    '121111', '121112', '121113', '121121', '121122', '121123', '121131', '121132', '121133',
    '121211', '121212', '121213', '121221', '121222', '121223', '121231', '121232', '121233',
    '121311', '121312', '121313', '121321', '121322', '121323', '121331', '121332', '121333',
    '122111', '122112', '122113', '122121', '122122', '122123', '122131', '122132', '122133',
    '122211', '122212', '122213', '122221', '122222', '122223', '122231', '122232', '122233',
    '122311', '122312', '122313', '122321', '122322', '122323', '122331', '122332', '122333',
    '123111', '123112', '123113', '123121', '123122', '123123', '123131', '123132', '123133',
    '123211', '123212', '123213', '123221', '123222', '123223', '123231', '123232', '123233',
    '123311', '123312', '123313', '123321', '123322', '123323', '123331', '123332', '123333',
    '131111', '131112', '131113', '131121', '131122', '131123', '131131', '131132', '131133',
    '131211', '131212', '131213', '131221', '131222', '131223', '131231', '131232', '131233',
    '131311', '131312', '131313', '131321', '131322', '131323', '131331', '131332', '131333',
    '132111', '132112', '132113', '132121', '132122', '132123', '132131', '132132', '132133',
    '132211', '132212', '132213', '132221', '132222', '132223', '132231', '132232', '132233',
    '132311', '132312', '132313', '132321', '132322', '132323', '132331', '132332', '132333',
    '133111', '133112', '133113', '133121', '133122', '133123', '133131', '133132', '133133',
    '133211', '133212', '133213', '133221', '133222', '133223', '133231', '133232', '133233',
    '133311', '133312', '133313', '133321', '133322', '133323', '133331', '133332', '133333',
    
    # Very small layouts (1-5 panels) - only for leftovers
    '11111', '11112', '11113', '11121', '11122', '11123', '11131', '11132', '11133',
    '11211', '11212', '11213', '11221', '11222', '11223', '11231', '11232', '11233',
    '11311', '11312', '11313', '11321', '11322', '11323', '11331', '11332', '11333',
    '12111', '12112', '12113', '12121', '12122', '12123', '12131', '12132', '12133',
    '12211', '12212', '12213', '12221', '12222', '12223', '12231', '12232', '12233',
    '12311', '12312', '12313', '12321', '12322', '12323', '12331', '12332', '12333',
    '13111', '13112', '13113', '13121', '13122', '13123', '13131', '13132', '13133',
    '13211', '13212', '13213', '13221', '13222', '13223', '13231', '13232', '13233',
    '13311', '13312', '13313', '13321', '13322', '13323', '13331', '13332', '13333',
    '21111', '21112', '21113', '21121', '21122', '21123', '21131', '21132', '21133',
    '21211', '21212', '21213', '21221', '21222', '21223', '21231', '21232', '21233',
    '21311', '21312', '21313', '21321', '21322', '21323', '21331', '21332', '21333',
    '22111', '22112', '22113', '22121', '22122', '22123', '22131', '22132', '22133',
    '22211', '22212', '22213', '22221', '22222', '22223', '22231', '22232', '22233',
    '22311', '22312', '22313', '22321', '22322', '22323', '22331', '22332', '22333',
    '23111', '23112', '23113', '23121', '23122', '23123', '23131', '23132', '23133',
    '23211', '23212', '23213', '23221', '23222', '23223', '23231', '23232', '23233',
    '23311', '23312', '23313', '23321', '23322', '23323', '23331', '23332', '23333',
    '31111', '31112', '31113', '31121', '31122', '31123', '31131', '31132', '31133',
    '31211', '31212', '31213', '31221', '31222', '31223', '31231', '31232', '31233',
    '31311', '31312', '31313', '31321', '31322', '31323', '31331', '31332', '31333',
    '32111', '32112', '32113', '32121', '32122', '32123', '32131', '32132', '32133',
    '32211', '32212', '32213', '32221', '32222', '32223', '32231', '32232', '32233',
    '32311', '32312', '32313', '32321', '32322', '32323', '32331', '32332', '32333',
    '33111', '33112', '33113', '33121', '33122', '33123', '33131', '33132', '33133',
    '33211', '33212', '33213', '33221', '33222', '33223', '33231', '33232', '33233',
    '33311', '33312', '33313', '33321', '33322', '33323', '33331', '33332', '33333',
    '1111', '1112', '1113', '1121', '1122', '1123', '1131', '1132', '1133',
    '1211', '1212', '1213', '1221', '1222', '1223', '1231', '1232', '1233',
    '1311', '1312', '1313', '1321', '1322', '1323', '1331', '1332', '1333',
    '2111', '2112', '2113', '2121', '2122', '2123', '2131', '2132', '2133',
    '2211', '2212', '2213', '2221', '2222', '2223', '2231', '2232', '2233',
    '2311', '2312', '2313', '2321', '2322', '2323', '2331', '2332', '2333',
    '3111', '3112', '3113', '3121', '3122', '3123', '3131', '3132', '3133',
    '3211', '3212', '3213', '3221', '3222', '3223', '3231', '3232', '3233',
    '3311', '3312', '3313', '3321', '3322', '3323', '3331', '3332', '3333',
    '111', '112', '113', '121', '122', '123', '131', '132', '133',
    '211', '212', '213', '221', '222', '223', '231', '232', '233',
    '311', '312', '313', '321', '322', '323', '331', '332', '333',
    '11', '12', '13', '21', '22', '23', '31', '32', '33',
    '1', '2', '3'
]

# ✅ FORCE 8 panels per page for optimal space utilization
target_panels_per_page = 8
max_panels_per_page = 8
min_panels_per_page = 8

folder_path = 'frames/final'  # Specify the folder path


def get_templates(input):
    page_templates = []
    start = 0

    while start < len(input):
        remaining_input = input[start:]
        
        # ✅ PRIORITY: Try to get exactly 8 panels per page
        if len(remaining_input) >= 8:
            # Find best 8-panel template
            best_template = None
            best_score = float('-inf')
            
            for template in templates:
                if len(template) == 8:  # Only consider 8-panel templates
                    temp = remaining_input[:8]
                    distance = hammingDist(temp, template)
                    score = 100 - distance * 10  # Higher score for better matches
                    
                    if score > best_score:
                        best_score = score
                        best_template = template
            
            # If no good 8-panel template found, use the first 8 characters
            if best_template is None:
                best_template = remaining_input[:8]
            
            page_templates.append(best_template)
            start += 8
            
        else:
            # ✅ Handle leftover panels with smart layouts
            remaining_length = len(remaining_input)
            
            if remaining_length == 0:
                break
            elif remaining_length == 1:
                # Single panel - make it large and centered
                page_templates.append("1")
            elif remaining_length == 2:
                # Two panels - side by side
                page_templates.append("11")
            elif remaining_length == 3:
                # Three panels - triangle layout
                page_templates.append("111")
            elif remaining_length == 4:
                # Four panels - 2x2 grid
                page_templates.append("1111")
            elif remaining_length == 5:
                # Five panels - 2+3 layout
                page_templates.append("11111")
            elif remaining_length == 6:
                # Six panels - 2x3 grid
                page_templates.append("111111")
            elif remaining_length == 7:
                # Seven panels - 3+4 layout
                page_templates.append("1111111")
            
            break  # This is the last page

    return page_templates


def last_page(panels, count_images, length):
    # ✅ Smart layouts for leftover panels - excellent UX
    for i in range(length):
        if length == 1:
            # Single panel - make it large and prominent
            new_panel = panel(f'frame{count_images:03d}', 3, 3)
        elif length == 2:
            # Two panels - make them medium sized
            new_panel = panel(f'frame{count_images:03d}', 2, 2)
        elif length == 3:
            # Three panels - medium sized
            new_panel = panel(f'frame{count_images:03d}', 2, 2)
        elif length == 4:
            # Four panels - normal size
            new_panel = panel(f'frame{count_images:03d}', 1, 1)
        elif length == 5:
            # Five panels - normal size
            new_panel = panel(f'frame{count_images:03d}', 1, 1)
        elif length == 6:
            # Six panels - normal size
            new_panel = panel(f'frame{count_images:03d}', 1, 1)
        elif length == 7:
            # Seven panels - normal size
            new_panel = panel(f'frame{count_images:03d}', 1, 1)
        else:
            # Default - normal size
            new_panel = panel(f'frame{count_images:03d}', 1, 1)
        panels.append(new_panel)
        count_images += 1
    return panels


def panel_create(page_templates):
    panels = []
    images = get_files_in_folder(folder_path)
    count_images = 1

    for i, page_template in enumerate(page_templates):
        # ✅ Check if this is the last page (fewer than 8 panels)
        is_last_page = (i == len(page_templates) - 1 and len(page_template) < 8)
        
        if is_last_page:
            # ✅ Use smart last page logic for excellent UX
            panels = last_page(panels, count_images, len(page_template))
        else:
            # ✅ Normal pages - all 8 panels are 1x1
            for j in page_template:
                new = panel(f'frame{count_images:03d}', 1, 1)
                panels.append(new)
                count_images += 1

    return panels